//0 = 0 - 2^0 = 1
//01 = 1 - 2^1 = 2
//0110 = 6 - 2^2 = 4
//01101001 = 105 - 2^3 = 8 
//0110100110010110 = 27030 - 2^4 = 16
//01101001100101101001011001101001 - 2^5 = 32
//0110100110010110100101100110100110010110011010010110100110010110 - 2^6 = 64
//01101001100101101001011001101001100101100110100101101001100101101001011001101001011010011001011001101001100101101001011001101001

//k = 1  => k-1 = 0 = 00000 = even -> 0
//k = 2  => k-1 = 1 = 00001 = odd  -> 1
//k = 3  => k-1 = 2 = 00010 = odd  -> 1
//k = 4  => k-1 = 3 = 00011 = even -> 0
//k = 5  => k-1 = 4 = 00100 = odd  -> 1
//k = 6  => k-1 = 5 = 00101 = even -> 0
//k = 7  => k-1 = 6 = 00110 = even -> 0
//k = 8  => k-1 = 7 = 00111 = odd  -> 1
//k = 9  => k-1 = 8 = 01000 = odd  -> 1
//k = 10 => k-1 = 9 = 01001 = even -> 0

class Solution {
    public int kthGrammar(int n, int k) {
        return (Integer.bitCount(k-1) % 2);
    }
}